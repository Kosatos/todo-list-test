{"version":3,"file":"main.js","mappings":"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","sources":["webpack://todo-list-test/./src/js/utils/clearForm.js","webpack://todo-list-test/./src/js/utils/renderForm.js","webpack://todo-list-test/./src/js/components/Task.js","webpack://todo-list-test/./src/js/components/Popup.js","webpack://todo-list-test/./src/js/app.js","webpack://todo-list-test/./src/js/utils/resizeBlock.js","webpack://todo-list-test/./src/js/utils/searchTask.js"],"sourcesContent":["// clearForm сбрасывает форму и скрывает при необходимости\n\nexport default function clearForm(form) {\n  form.reset();\n  if (form.classList.contains('show')) {\n    form.classList.remove('show');\n  }\n}\n","// renderForm рендерит разметку формы\n\nexport default function renderForm() {\n  this.editFormLayout = `<form class=\"app__edit-form edit-form\" id=\"edit-form\">\n\t<textarea type=\"text\" class=\"edit-form__input edit-name\" id=\"edit-name\" readonly></textarea>\n\n\t<textarea type=\"text\" class=\"edit-form__input edit-note\" id=\"edit-note\" readonly></textarea>\n\n\t<div class=\"edit-form__date\">\n\n\t\t<div class=\"edit-form__created\">Created <span class=\"edit-form__create-date\"\n\t\t\t\tid=\"create-date\"></span>\n\t\t</div>\n\n\t\t<div class=\"edit-form__deadline\">To be completed by <input type=\"date\"\n\t\t\t\tclass=\"edit-form__input edit-deadline\" id=\"edit-deadline\" readonly></input>\n\t\t</div>\n\n\t</div>\n\n\t<div class=\" edit-form__buttons\">\n\t\t<button class=\"app__btn edit-form__btn\" id=\"start-btn\">Get started</button>\n\t\t<button class=\"app__btn edit-form__btn\" id=\"edit-btn\">Edit</button>\n\t</div>\n</form>`;\n  document.querySelector('.app__component-right').innerHTML =\n    this.editFormLayout;\n\n  this.editForm = document.getElementById('edit-form');\n  this.editForm.classList.add('show');\n  this.editNameInput = document.getElementById('edit-name');\n  this.editNoteInput = document.getElementById('edit-note');\n  this.editDeadlineInput = document.getElementById('edit-deadline');\n  this.createDateEl = document.getElementById('create-date');\n  this.getStartedBtn = document.getElementById('start-btn');\n  this.editBtn = document.getElementById('edit-btn');\n}\n","import clearForm from '../utils/clearForm';\nimport renderForm from '../utils/renderForm';\n\n// Класс для работы с задачей, принимает в себя данные, включающие в себя имя, заметки и дэдлайн\n\nexport default class Task {\n  constructor(data) {\n    this.name = data.name;\n    this.note = data?.note;\n    this.date = new Date();\n    this.deadline = data?.deadline;\n    this.status = 'pending';\n  }\n\n  // renderTask создает DOM-элемент задачи и вешает обработчики событий на кнопки завершения, удаления и на нажатие по самой задаче.\n  renderTask() {\n    this.taskEl = document.createElement('li');\n    this.taskEl.className = 'todo-list__item todo-list-item';\n\n    this.taskNameEl = document.createElement('h4');\n    this.taskNameEl.textContent = this.name;\n    this.taskNameEl.className = 'todo-list-item__name';\n\n    this.taskControllersEl = document.createElement('div');\n    this.taskControllersEl.className = 'todo-list-item__controllers';\n    this.taskCompleteEl = document.createElement('div');\n    this.taskCompleteEl.className =\n      'todo-list-item__controller task-complete-btn';\n    this.taskDeleteEl = document.createElement('div');\n    this.taskDeleteEl.className = 'todo-list-item__controller task-delete-btn';\n\n    this.taskControllersEl.appendChild(this.taskCompleteEl);\n    this.taskControllersEl.appendChild(this.taskDeleteEl);\n\n    this.taskEl.appendChild(this.taskNameEl);\n    this.taskEl.appendChild(this.taskControllersEl);\n\n    this.taskEl.addEventListener('click', (event) => {\n      // Проверяем, чтобы не обрабатывался клик по кнопкам удаления и завершения задачи\n      if (\n        event.target == this.taskDeleteEl ||\n        event.target == this.taskCompleteEl\n      ) {\n        return;\n      }\n      // Рендерим форму редактирования задачи\n      this.renderEditForm();\n    });\n\n    this.taskCompleteEl.addEventListener('click', () => {\n      this.completeBtnListener();\n    });\n    this.taskDeleteEl.addEventListener('click', () => {\n      this.deleteBtnListener();\n    });\n\n    return this.taskEl;\n  }\n\n  // renderEditForm создает DOM-элемент формы редактирования задачи и вешает обработчики событий на кнопки редактирвоания/сохранения и старда выполнения задачи.\n  renderEditForm() {\n    // Рендерим разметку формы с привязкой к контексту класса\n    renderForm.call(this);\n\n    // Присваиваем инпутам редактирования текущие значения данных задачи\n    this.editNameInput.value = this.name;\n    this.editNoteInput.value =\n      this.note && this.note !== '' ? this.note : 'There are no notes.';\n    this.editDeadlineInput.value = this.deadline\n      ? this.deadline\n      : 'There is no deadline.';\n    this.createDateEl.textContent = this.formatDate(this.date);\n\n    // Проверяем состаяние задачи для включения или отключения кнопки старта выполнения задачи\n    this.getStartedBtn.disabled =\n      this.status === 'complete' || this.status === 'process' ? true : false;\n\n    this.editBtn.addEventListener('click', (event) => {\n      event.preventDefault();\n      this.editTask();\n    });\n\n    // При нажатии на кнопку getStarted(старт выполнения задачи) меняем состояние задачи на \"process\", отключаем кнопку\n    this.getStartedBtn.addEventListener('click', (event) => {\n      event.preventDefault();\n      this.getStartedBtnListener();\n      this.getStartedBtn.disabled = true;\n    });\n  }\n\n  // editTask при нажатии на Edit разрешает редактирование данных задачи, при нажатии на Save сохраняет измененные данные и запрещает редактирование\n  editTask() {\n    if (!this.editBtn) {\n      return;\n    }\n\n    if (this.editBtn.textContent === 'Edit') {\n      this.saveOrEditEl(false, 'Save');\n      return;\n    }\n\n    // сохраняем измененные данные\n    this.name =\n      this.editNameInput && this.editNameInput !== ''\n        ? this.editNameInput.value\n        : 'Untitled';\n    this.note =\n      this.editNoteInput && this.editNoteInput !== ''\n        ? this.editNoteInput.value\n        : 'There are no notes.';\n    this.deadline = this.editDeadlineInput\n      ? this.editDeadlineInput.value\n      : 'There is no deadline.';\n\n    if (this.taskNameEl) {\n      this.taskNameEl.textContent = this.name;\n    }\n\n    this.saveOrEditEl('readonly', 'Edit');\n  }\n\n  // getStartedBtnListener изменяет состояние задачи на \"process\"\n  getStartedBtnListener() {\n    if (!this.taskEl) {\n      return;\n    }\n    if (this.status !== 'pending') {\n      return;\n    }\n\n    this.taskEl.classList.add('task-process');\n    this.status = 'process';\n  }\n\n  // completeBtnListener изменяет состояние задачи на \"complete\"/\"pending\"\n  completeBtnListener() {\n    if (!this.taskEl) {\n      return;\n    }\n    if (\n      this.status === 'complete' &&\n      this.taskEl.classList.contains('task-complete')\n    ) {\n      this.taskEl.classList.toggle('task-complete');\n      this.status = 'pending';\n      if (this.getStartedBtn) {\n        this.getStartedBtn.disabled = false;\n      }\n\n      return;\n    }\n\n    if (\n      this.status === 'process' &&\n      this.taskEl.classList.contains('task-process')\n    ) {\n      this.taskEl.classList.toggle('task-process');\n    }\n\n    if (this.getStartedBtn) {\n      this.getStartedBtn.disabled = true;\n    }\n\n    this.taskEl.classList.toggle('task-complete');\n    this.status = 'complete';\n  }\n\n  // deleteBtnListener удаляет DOM-элемент задачи, переводит его состояние в 'deleted'\n  deleteBtnListener() {\n    if (!this.taskEl) {\n      return;\n    }\n    this.taskEl.remove();\n    this.status = 'deleted';\n    if (this.editForm) {\n      clearForm(this.editForm);\n    }\n  }\n\n  // saveOrEditEl - функция для управления состоянием формы редактирования(Edit/Save)\n  saveOrEditEl(readonly, btnText) {\n    const editElements = [\n      this.editNameInput,\n      this.editNoteInput,\n      this.editDeadlineInput,\n    ];\n\n    editElements.forEach((el) => {\n      if (el) {\n        el.readOnly = readonly;\n        btnText === 'Save'\n          ? el.classList.add('edit')\n          : el.classList.remove('edit');\n      }\n    });\n    this.editBtn.textContent = btnText;\n  }\n\n  // formatDate приводит дату к формату дд.мм.гггг\n  formatDate(date) {\n    const day = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate();\n    const month =\n      date.getMonth() < 10 ? `0${date.getMonth()}` : this.date.getMonth();\n    const year = String(date.getFullYear());\n\n    const formattedDate = `${day}.${month}.${year}`;\n\n    return formattedDate;\n  }\n\n  // hideEl скрывает DOM-элемент задачи\n  hideEl(el) {\n    if (el) {\n      el.classList.add('hidden');\n    }\n    return;\n  }\n\n  // showEl показывает DOM-элемент задачи\n  showEl(el) {\n    if (el) {\n      el.classList.remove('hidden');\n    }\n    return;\n  }\n}\n","export default class Popup {\n  constructor(popupId, cancelId, closeId) {\n    this.popup = document.getElementById(popupId);\n    this.overlay = document.getElementById(cancelId);\n    this.closeItem = document.getElementById(closeId);\n\n    // при нажатии на область вокруг popup'а - скрываем его\n    this.overlay.addEventListener('click', () => this.closePopup());\n    // при нажатии на иконку закрытия - скрываем popup\n    this.closeItem.addEventListener('click', () => this.closePopup());\n  }\n\n  //   closePopup скрывает popup\n  closePopup() {\n    if (!this.popup.classList.contains('show')) {\n      return;\n    }\n    this.popup.classList.toggle('show');\n  }\n\n  //   closePopup показывает popup\n  showPopup() {\n    if (this.popup.classList.contains('show')) {\n      return;\n    }\n    this.popup.classList.toggle('show');\n  }\n}\n","import Task from './components/Task';\nimport Popup from './components/Popup';\nimport clearForm from './utils/clearForm';\nimport searchTask from './utils/searchTask';\nimport resizeBlock from './utils/resizeBlock';\n\nwindow.onload = () => {\n  // Создаем массив для хранения задач (экземпляров класса Task)\n  const todoTasks = [];\n\n  // Ищем DOM-эелементы, с которым будем работать\n  const resizibleComponent = document.querySelector('.app__component-left'); // Элемент, кооторый должен растягиваться\n  resizeBlock(resizibleComponent);\n\n  const todoList = document.getElementById('todo-list'); // Список, куда добавляются задачи\n\n  const addTaskBtn = document.getElementById('add-task-btn'); // Кнопка добавления задачи\n\n  const createForm = document.getElementById('create-form'); // Форма для создания задачи\n\n  const alert = createForm.querySelector('.create-form__alert'); // Ошибка при задании задачи пустого имени\n\n  const searchForm = document.getElementById('search-form'); // Форма поиска задачи по имени\n\n  const searchInput = document.getElementById('search-input'); // Инпут для ввода поиска задачи по имени\n\n  // Экземпляр класса Popup, для работа с Pupup'ом\n  const createTaskPopup = new Popup(\n    'create-task-popup',\n    'cancel-popup',\n    'close-popup'\n  );\n\n  // Очистка форм при загрузке страницы\n  clearForm(createForm);\n  clearForm(searchForm);\n\n  // Тестовые задачи\n  const testTasks = [\n    {\n      name: 'Оставить отклик на вакансию',\n      note: 'JS-разработчик',\n      deadline: '2022-08-02',\n    },\n    {\n      name: 'Сделать приложение TODO для тестового задания',\n      note: `●\tПриложение должно включать в себя минимум два основных компонента (примерный вид приложения см. на рисунке выше):\n\t  1)\tВертикальный список с наименованиями заметок TODO;\n\t  2)\tОбласть взаимодействия заметки TODO.\n\t  ●\tРеализовать возможность добавления, редактирования и удаления заметок TODO;\n\t  ●\tОбрезать конец наименования заметки TODO “…”, если имя не влезает в вертикальный список наименований заметок TODO.\n\t  `,\n      deadline: '2022-08-16',\n    },\n    {\n      name: 'Досмотреть третью серию Тед Лассо',\n      note: 'Остановился на 30:11',\n    },\n    {\n      name: 'Изучить ReactJS',\n      deadline: '2022-09-10',\n    },\n    {\n      name: 'Изучить PHP',\n      deadline: '2022-10-10',\n    },\n    {\n      name: 'Сделать курсовую работу по JS',\n      note: 'Продвинутый JavaScript',\n      deadline: '2022-08-28',\n    },\n    {\n      name: 'Уволиться со старой работы',\n      deadline: '2022-08-31',\n    },\n    {\n      name: 'Съездить в Москву',\n      note: 'Билеты взять на 27 число',\n      deadline: '2022-08-30',\n    },\n  ];\n  testTasks.forEach((el) => createTask(el.name, el.note, el.deadline));\n\n  // При клике на кнопку добавления задачи показываем Popup\n  addTaskBtn.addEventListener('click', () => {\n    createTaskPopup.showPopup();\n    alert.classList.remove('show');\n  });\n\n  // При отправке формы создаем задачу(экземпляр класса Task) и добавляем в список. Если поле имени пустое, показываем подсказку-предупреждение\n  createForm.addEventListener('submit', (event) => {\n    event.preventDefault();\n\n    const name = document.getElementById('create-task-name').value;\n    const note = document.getElementById('create-task-note').value;\n    const deadline = document.getElementById('create-task-deadline').value;\n\n    if (name === '') {\n      alert.textContent = 'Required field';\n      alert.classList.add('show');\n      return;\n    }\n\n    createTask(name, note, deadline);\n  });\n\n  // При вводе символов в поле показываем задачи, содержащие эти символы в имени\n  searchInput.addEventListener('input', () => {\n    const value = searchInput.value.toLowerCase();\n    searchTask(todoTasks, value);\n  });\n\n  // Функция создания задачи, принимает знанчения, введенные в поля формы создания задачи(createForm), создает с этими данными экземпляр класса Task и сохраняет его в массив для хранения, закрывает popup, чистит форму\n  function createTask(name, note, deadline) {\n    const taskData = {\n      name: name,\n      note: note,\n      deadline: deadline,\n    };\n\n    const task = new Task(taskData);\n    todoTasks.push(task);\n    todoList.appendChild(task.renderTask());\n\n    createTaskPopup.closePopup();\n    clearForm(createForm);\n  }\n};\n","// resizeBlock позволяет элементу, попадаемого в аргумент, изменять ширину\n\nexport default function resizeBlock(resizibleEl) {\n  // Находим элемент захвата\n  const grab = resizibleEl.querySelector('.grab');\n\n  if (grab) {\n    // При захвате определяем координату Х и ширину растягиваемого элемента\n    grab.addEventListener('mousedown', function (event) {\n      event.preventDefault();\n      const x = event.pageX;\n      const elWidth = resizibleEl.offsetWidth;\n      function changeWidth(evt) {\n        resizibleEl.style.width = elWidth + (evt.pageX - x) + 'px';\n      }\n\n      // При движении мышью прибавлять к ширине элемента разницу координат Х\n      document.body.addEventListener('mousemove', changeWidth);\n\n      // При отпускании кнопки мышт отписываемся от обработчика движения мыши\n      document.body.addEventListener('mouseup', function () {\n        document.body.removeEventListener('mousemove', changeWidth);\n      });\n    });\n  }\n  return;\n}\n","// searchTask скрывает элементы не соответсвующие поиску, а соответсвующие показывает\n\nexport default function searchTask(tasks, value) {\n  tasks.forEach((el) =>\n    el.name.toLowerCase().search(value.toLowerCase()) !== -1\n      ? el.showEl(el.taskEl)\n      : el.hideEl(el.taskEl)\n  );\n}\n"],"names":["clearForm","form","reset","classList","contains","remove","renderForm","this","editFormLayout","document","querySelector","innerHTML","editForm","getElementById","add","editNameInput","editNoteInput","editDeadlineInput","createDateEl","getStartedBtn","editBtn","Task","constructor","data","name","note","date","Date","deadline","status","renderTask","taskEl","createElement","className","taskNameEl","textContent","taskControllersEl","taskCompleteEl","taskDeleteEl","appendChild","addEventListener","event","target","renderEditForm","completeBtnListener","deleteBtnListener","call","value","formatDate","disabled","preventDefault","editTask","getStartedBtnListener","saveOrEditEl","toggle","readonly","btnText","forEach","el","readOnly","getDate","getMonth","String","getFullYear","hideEl","showEl","Popup","popupId","cancelId","closeId","popup","overlay","closeItem","closePopup","showPopup","window","onload","todoTasks","resizibleEl","grab","x","pageX","elWidth","offsetWidth","changeWidth","evt","style","width","body","removeEventListener","resizeBlock","todoList","addTaskBtn","createForm","alert","searchForm","searchInput","createTaskPopup","createTask","task","push","toLowerCase","tasks","search","searchTask"],"sourceRoot":""}